// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=interface_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"
	model "todo_service/domain/model"

	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddTodo mocks base method.
func (m *MockDatabase) AddTodo(ctx context.Context, todo *model.Todo) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTodo", ctx, todo)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTodo indicates an expected call of AddTodo.
func (mr *MockDatabaseMockRecorder) AddTodo(ctx, todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTodo", reflect.TypeOf((*MockDatabase)(nil).AddTodo), ctx, todo)
}

// DeleteTodo mocks base method.
func (m *MockDatabase) DeleteTodo(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockDatabaseMockRecorder) DeleteTodo(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockDatabase)(nil).DeleteTodo), ctx, id)
}

// GetTodoList mocks base method.
func (m *MockDatabase) GetTodoList(ctx context.Context) (*model.Todos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoList", ctx)
	ret0, _ := ret[0].(*model.Todos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodoList indicates an expected call of GetTodoList.
func (mr *MockDatabaseMockRecorder) GetTodoList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoList", reflect.TypeOf((*MockDatabase)(nil).GetTodoList), ctx)
}

// UpdateTodoStatus mocks base method.
func (m *MockDatabase) UpdateTodoStatus(ctx context.Context, id uint64, statusID model.TodoStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodoStatus", ctx, id, statusID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodoStatus indicates an expected call of UpdateTodoStatus.
func (mr *MockDatabaseMockRecorder) UpdateTodoStatus(ctx, id, statusID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodoStatus", reflect.TypeOf((*MockDatabase)(nil).UpdateTodoStatus), ctx, id, statusID)
}

// UpdateTodoTitle mocks base method.
func (m *MockDatabase) UpdateTodoTitle(ctx context.Context, id uint64, title model.TodoTitle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodoTitle", ctx, id, title)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodoTitle indicates an expected call of UpdateTodoTitle.
func (mr *MockDatabaseMockRecorder) UpdateTodoTitle(ctx, id, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodoTitle", reflect.TypeOf((*MockDatabase)(nil).UpdateTodoTitle), ctx, id, title)
}
