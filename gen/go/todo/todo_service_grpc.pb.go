// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: todo_service/todo_service.proto

package todo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TodoApi_Get_FullMethodName         = "/todo_service.TodoApi/Get"
	TodoApi_Add_FullMethodName         = "/todo_service.TodoApi/Add"
	TodoApi_Delete_FullMethodName      = "/todo_service.TodoApi/Delete"
	TodoApi_HealthCheck_FullMethodName = "/todo_service.TodoApi/HealthCheck"
	TodoApi_Watch_FullMethodName       = "/todo_service.TodoApi/Watch"
)

// TodoApiClient is the client API for TodoApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoApiClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (TodoApi_WatchClient, error)
}

type todoApiClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoApiClient(cc grpc.ClientConnInterface) TodoApiClient {
	return &todoApiClient{cc}
}

func (c *todoApiClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, TodoApi_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoApiClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, TodoApi_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoApiClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, TodoApi_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoApiClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, TodoApi_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoApiClient) Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (TodoApi_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoApi_ServiceDesc.Streams[0], TodoApi_Watch_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &todoApiWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TodoApi_WatchClient interface {
	Recv() (*HealthCheckResponse, error)
	grpc.ClientStream
}

type todoApiWatchClient struct {
	grpc.ClientStream
}

func (x *todoApiWatchClient) Recv() (*HealthCheckResponse, error) {
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TodoApiServer is the server API for TodoApi service.
// All implementations must embed UnimplementedTodoApiServer
// for forward compatibility
type TodoApiServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Watch(*HealthCheckRequest, TodoApi_WatchServer) error
	mustEmbedUnimplementedTodoApiServer()
}

// UnimplementedTodoApiServer must be embedded to have forward compatible implementations.
type UnimplementedTodoApiServer struct {
}

func (UnimplementedTodoApiServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTodoApiServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedTodoApiServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTodoApiServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedTodoApiServer) Watch(*HealthCheckRequest, TodoApi_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedTodoApiServer) mustEmbedUnimplementedTodoApiServer() {}

// UnsafeTodoApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoApiServer will
// result in compilation errors.
type UnsafeTodoApiServer interface {
	mustEmbedUnimplementedTodoApiServer()
}

func RegisterTodoApiServer(s grpc.ServiceRegistrar, srv TodoApiServer) {
	s.RegisterService(&TodoApi_ServiceDesc, srv)
}

func _TodoApi_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoApiServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoApi_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoApiServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoApi_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoApiServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoApi_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoApiServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoApi_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoApiServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoApi_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoApiServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoApi_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoApiServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoApi_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoApiServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoApi_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HealthCheckRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoApiServer).Watch(m, &todoApiWatchServer{stream})
}

type TodoApi_WatchServer interface {
	Send(*HealthCheckResponse) error
	grpc.ServerStream
}

type todoApiWatchServer struct {
	grpc.ServerStream
}

func (x *todoApiWatchServer) Send(m *HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TodoApi_ServiceDesc is the grpc.ServiceDesc for TodoApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todo_service.TodoApi",
	HandlerType: (*TodoApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TodoApi_Get_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _TodoApi_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TodoApi_Delete_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _TodoApi_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _TodoApi_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "todo_service/todo_service.proto",
}
